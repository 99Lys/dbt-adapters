name: Release

on:
  workflow_dispatch:
    inputs:
      package:
        type: choice
        description: Choose what to publish
        options:
        - dbt-adapters
        - dbt-tests-adapter
        default: dbt-adapters
      deploy-to:
        type: choice
        description: Choose where to publish
        options:
        - prod
        - test
        default: prod
      target_branch:
        description: "The branch to release from"
        type: string
        required: true
      release-type:
        type: choice
        description: Choose what to bump, raise a PR to bump major or minor versions
        options:
        - patch
        - beta
        - alpha
        default: alpha

# this is the permission that allows creating a new release
permissions: write

defaults:
  run:
    shell: bash

# will cancel previous workflows triggered by the same event and for the same ref for PRs or same SHA otherwise
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name }}-${{ contains(github.event_name, 'pull_request') && github.event.pull_request.head.ref || github.sha }}-${{ inputs.package }}-${{ inputs.deploy-to }}
  cancel-in-progress: true

jobs:
  release:
    name: PyPI - ${{ inputs.deploy-to }}
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.deploy-to }}
      url: ${{ vars.PYPI_PROJECT_URL }}
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          branch: ${{ inputs.target_branch }}

      - name: "Generate Branch Name"
        id: variables
        run: |
          name="prep-release/${{ inputs.deploy-to }}/$(hatch version)_$GITHUB_RUN_ID"
          echo "branch_name=$name" >> $GITHUB_OUTPUT

      - name: "Create Branch - ${{ steps.variables.outputs.branch_name }}"
        run: |
          git checkout -b ${{ steps.variables.outputs.branch_name }}
          git push -u origin ${{ steps.variables.outputs.branch_name }}

      - name: "[Notification] Temp branch created"
        run: |
          # Send notification
          title="Temp branch generated"
          message="The ${{ steps.variables.outputs.branch_name }} branch created"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"

      - name: Setup `hatch`
        uses: ./.github/actions/setup-hatch

      - name: Build `dbt-adapters`
        if: ${{ inputs.package == 'dbt-adapters' }}
        uses: ./.github/actions/build-hatch

      - name: Build `dbt-tests-adapter`
        if: ${{ inputs.package == 'dbt-tests-adapter' }}
        uses: ./.github/actions/build-hatch
        with:
          working-dir: "./dbt-tests-adapter/"

      - name: Setup `hatch`
        uses: ./.github/actions/setup-hatch

      - name: Build `dbt-adapters`
        if: ${{ inputs.package == 'dbt-adapters' }}
        uses: ./.github/actions/build-hatch

      - name: Build `dbt-tests-adapter`
        if: ${{ inputs.package == 'dbt-tests-adapter' }}
        uses: ./.github/actions/build-hatch
        with:
          working-dir: "./dbt-tests-adapter/"

      - name: Publish to PyPI
      - name: "Generate Changelog"
        uses: ./.github/actions/generate-changelog
        with:
          target-branch: ${{ inputs.target_branch }}
          release-type: ${{ inputs.release-type }}

      - name: "Publish to PyPI"
        uses: ./.github/actions/publish-pypi
        with:
          repository-url: ${{ vars.PYPI_REPOSITORY_URL }}
          repository-url: ${{ vars.PYPI_REPOSITORY_URL }}

      - name: "Bump version"
        uses: ./.github/actions/release-type
        run: |
          hatch version ${{ inputs.release-type }}

      - name: "Merge Changes Into ${{ inputs.target_branch }}"
        uses: everlytic/branch-merge@1.1.5
        with:
          source_ref: ${{ needs.create-temp-branch.outputs.branch_name }}
          target_branch: ${{ inputs.target_branch }}
          github_token: ${{ secrets.FISHTOWN_BOT_PAT }}
          commit_message_template: "[Automated] Merged {source_ref} into target {target_branch} during release process"

      - name: "[Notification] Changes Merged into ${{ inputs.target_branch }}"
        run: |
          title="Changelog and Version Bump Branch Merge"
          message="The ${{ needs.create-temp-branch.outputs.branch_name }} branch was merged into ${{ inputs.target_branch }}"
          echo "::notice title=${{ env.NOTIFICATION_PREFIX }}: $title::$message"